Caderno para aprender java.

Write once run everywhere / Significa o meio utilizado para se escrever o código uma ves e distribuir para varias outras plataformas de comunicação.

liguagem de alto nível são liguagens de que o ser humano consegue intender com mais facilidade, já liguagens de baixo nível são liguagens que os computadores conseguem intender mais facilmente.


Java é uma liguagem de alto nível.

Os arquivos java são arquivos .java mas ele acaba virando arquivos .class atraves de compiladores.

O termo para o prosseso de tradução da liguagem java para uma liguagem que o computador consegue entender é JVM (Java Virtual Machine Máquina Virtual Java).

Para os programas javas rodarem nos computadores os computadores precição ter JRE (Java runtime environment).

O kite de feramentas de comandos que seram usados no java é chamado de JDK (Java Development KIT).

O aplicativo utilizado para criar arquivos em formato de java são chamados de IDE (Integrated Development Environment).

Para o curso iremos utilizar a IDE - IntelliJ IDEA Community Edition essa IDE é a mis semelhante para a IDE de desenvolvimento de android sendo assim ela foi escolhida o aplicativo para linha de aprendizagem do curso.

Após inicializar o IntelliJ e visto que pode ser criado um arquivo apos criar esse arquivo ira ser criado altomaticamente outros arquivos para o auxílio do arquivo principal, que seria o código que está na pasta src das pastas criadas e mantem os arquivos lá em .java e .class.

E visto que pode ser feito uma criação de uma bloco de porgramação no IntelliJ clicando com o botão direito em cima da pasta src (Source / Fonte) e indo em cima da categoria New e em seguida clicando na opção Java Class. É indicado que os nomes dos seus arquivos sempre comessem com letra maiúscula no início da palavra e o resto tenha letra minúscula lembrando que caracteres especiais como espações e * ? / ´ \ não são permitidos.

Lembrate: letras MAIÚSCULAS e letras minúscula dão diferenças na programação, então preste atenção.

Na configuração do java todas as intruções devem terminar com ; , caso ao contrario o jáva não vai entender que você encerrou a linha de programação e vai dar um erro.

Dentro da programação temos alguns padroes de configuração que são seguidos pelos desenvolvedores e seria legal eu aprender:

Snakecase: Quando escreve a palavra utilizando o espaço como _ , como por exemplo: verson_one

Pascalcase: Quando utilizamos a primeira letra da palavra como maiúscula e não colocamos espaço, como por exemplo: VersonOne

Camelcase: Quando Utilizamos a primeira letra da palavra como maiúscula mais na primeira palavra utilizamos tudo em minúscula, como por exemplo: versonOne

O metodo main é obrigatório para dizer para o nosso programa qual é a primeira função que ele deve fazer ao iniciar a leitura do código em java, o nome desse parte da programação é entry-point.

A execução da programação sempre é executada de maneira de cima para baixo e também sempre é execultadodo a programação que está dentro dos conchetes {}

Em jáva o espações na programação não são importantes eles são iguinorados pelo programa, porem os espaços servem para deixar o código mais fácil de entender, então é recomendado utilizar, e o nome dessa pratica se chama de Indentação.

Na programação do java nos podemos nanipular informações colocando elas em variaveis ou vetores. podemos fazer também programações de funções (Tambem pode ser chamado de métodos) bases, isso quer dizer que a partir do momente que nos chamarmos a intrução ele ira executar a linha da funsão que nos já estabelecemos.

Através do // podemos colocar anotações no código ajudando ele a ficar organizado e deixar conque outras pessoas que possam intender o nosso código.

System.out.println("O que você quer que mosrte"); / Ele mostra na parte executavel o que você escreveu dentro do parenteses. Detalhes caso você coloque por exemplo (2+3) dentro do  paremtese ele vai fazer a soma desses valores e vai te mostrar 5. Para demostrar calculos não resolvidos ou mostrar mensagem você tem que colocar "" dentro do parentese como por exemplo ("Olá").

var example = 6; / Isso é um código de criação de variável, nesse codigo eu estou criando uma variável com o nome example que recebe o numero 6. Quando é dado um unico igula isso significa recebe. var vem da palavra em inglês Variable. Para essa variável receber testo em sua menoria você tem que colocar a mensagem entre "" como por exemplo var exemplo = "Exemplo";.

Dentro do java nos temos quatro tipos de variáveis:
Variaveis -> tipo: Textos (Strings)
Variaveis -> tipo: Numeros (Int)
Variaveis -> tipo: Numeros fracionados (Doubles)
Variaveis -> tipo: Booleanas (verdadeiro / falso)

String example = ", Olá"; / Meio antigo de se falar uma variavel de texto. Verções mais recentes do java não contem mais esse tipo de código. Isso pode ser trocado por var.

int example = 10; // Coloca numetros inteiros. Isso pode ser trocado por var.

double example = 24.30; / Coloca numetros quebrados. Isso pode ser trocado por var.

boolean example = true; / Representeção boleanas ( verdadeiro / falso ). Isso pode ser trocado por var.

Voce não presisa declarar o valor da variável quando você a cria você pode criar a variavel e depois no código declarar qual é essa variável como por exemplo:
int example;
...
...
...
example = 10;
Quando for fazer isso no seu código lembre-sé que é bom utilizar o int, double e boolean ao invés do var, pois assim você recebera um alerta de erro ao executar o arquivo caso a variável esteja com informação incorreta.

Dentro do java nos temos dois tipos de erro de programação escriata do código, que são erros de compilação e erro de sintances e temos um erro de execução (Exception / Exceção) que é o erro durante a programação em si, sendo assim durante a execução do programa foi visto um comando que é inviavel a sua execução, como por exemplo a divisão de uma numero por zero.
Erros de sintances é quando você escreve algo errado ou esquece um ponto ou palavra de comando, já erro de compilação e quando você escreve para uma feramenta exercer uma função que ela não consegue exercer. Como por exemplo:
String nome = "David" // Erro de sintances
int number = "Hello"; // Erro de compilação

Para copilar os seus aquivos em ".class" que é o tipo de arquivo que o computador entende você tem que ir no prompt de comando e digitar as seguintes coias:
Explicação:
C:"Caso esteja em um disco local diferente é so mudalo escrevendo a letra do disco local com os dois pontos e dando enter" (Disco local):\(Caminho até a paasta onde o arquivo .java está salvo "Dica esta na pasta src")
Exemplo: D:>cd D:\Users\Adriano\Documents\Java\Projeto\AtividadeB\src

Agora escreva dir na frente e ele ira mostrar as descrição do que está na pasta
Exemplo: D:\Users\Adriano\Documents\Java\Projeto\AtividadeB\src>dir

Após verificar que os arquivos dentro da pasta, escreva javac e vai colocar o nome do arquivo que nos vamos mudar "Lembre de colocar o dominio .java"
Exemplo: D:\Users\Adriano\Documents\Java\Projeto\AtividadeB\src>javac Main.java

Agora foi criado um arquivo .class na mesma pasta do arquivo .java, caso você deseja conficar no prompt se ele esta la é so digitar dir e ele irá te mostra ele lá. e caso você queira executalo é so escrever java e colocar o nome do programa como no exemplo abaixo
Exemplo: D:\Users\Adriano\Documents\Java\Projeto\AtividadeB\src>java Main

Dando seguencia ao curso vamos fazer as funções que são declarações de execução de furmulas que podem ser repetidas, para criar uma função é só escrever:
static void (Nome da função)(Paremetros que a função ira utilizar) {(Função que deseja que sejá feita)}
Exemplo:
static void example(int x, int y){}

Para executar a função é so sitar o nome dela durante o seu codigo e em seguida colocar entre parenteses os parametros que ela ira utilizar. Exemplo:
example(5, 16);

Utilizando a ideologia que o que está dentro do () é as definições das variáveis que seram utilizadas então da ara se definir que apartir do momento que nos escrevemos public static void main(String[] args) nos estamos definindo que dentro dessa programação iremos utilizar a função String e que o nome dessa variável é args. Foi explicado que os [] são uma criação de infinitas variaveis com o nome args no programa, e para acessa-las você tem que escrever args[0], mas eu não consegui manupular essas variáveis muito bem, basicamente so consegui fazer com que a pessoa que tivesse executando o projeto conseguise manupular, para mais detales vejá no arquivo AtividadeD.

Para executar o arquivo AtividadeD eu precisei me passar como o executor e para isso tive que ir para janela Run e abrir a tela de Edit Configurations..., lá tive que criar um executor e falar o que eu queria falar como variável.  

